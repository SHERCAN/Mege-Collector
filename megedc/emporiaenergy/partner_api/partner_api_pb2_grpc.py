# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import partner_api_pb2 as partner__api__pb2


class PartnerApiStub(object):
    """The methods available from the Emporia Energy Partner API.  The Emporia API is available via gRPC at 
    URL:  partner-api.emporiaenergy.com 
    PORT: 50051
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/protos.PartnerApi/Authenticate',
                request_serializer=partner__api__pb2.AuthenticationRequest.SerializeToString,
                response_deserializer=partner__api__pb2.AuthenticationResponse.FromString,
                )
        self.GetDevices = channel.unary_unary(
                '/protos.PartnerApi/GetDevices',
                request_serializer=partner__api__pb2.DeviceInventoryRequest.SerializeToString,
                response_deserializer=partner__api__pb2.DeviceInventoryResponse.FromString,
                )
        self.GetUsageData = channel.unary_unary(
                '/protos.PartnerApi/GetUsageData',
                request_serializer=partner__api__pb2.DeviceUsageRequest.SerializeToString,
                response_deserializer=partner__api__pb2.DeviceUsageResponse.FromString,
                )
        self.GetOutletStatus = channel.unary_unary(
                '/protos.PartnerApi/GetOutletStatus',
                request_serializer=partner__api__pb2.DeviceListRequest.SerializeToString,
                response_deserializer=partner__api__pb2.OutletStatusResponse.FromString,
                )
        self.SetOutletStatus = channel.unary_unary(
                '/protos.PartnerApi/SetOutletStatus',
                request_serializer=partner__api__pb2.OutletStatusRequest.SerializeToString,
                response_deserializer=partner__api__pb2.OutletStatusResponse.FromString,
                )


class PartnerApiServicer(object):
    """The methods available from the Emporia Energy Partner API.  The Emporia API is available via gRPC at 
    URL:  partner-api.emporiaenergy.com 
    PORT: 50051
    """

    def Authenticate(self, request, context):
        """login with the email and password you use on the portal website and get back an auth_token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDevices(self, request, context):
        """get the collection of devices associated to your partner account, 
        optionally limited to devices related to one or more customer emails
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsageData(self, request, context):
        """get usage data for one or more devices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOutletStatus(self, request, context):
        """determine if one or more Outlets are currently on
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOutletStatus(self, request, context):
        """set one or more Outlets to be on or off.  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PartnerApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=partner__api__pb2.AuthenticationRequest.FromString,
                    response_serializer=partner__api__pb2.AuthenticationResponse.SerializeToString,
            ),
            'GetDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDevices,
                    request_deserializer=partner__api__pb2.DeviceInventoryRequest.FromString,
                    response_serializer=partner__api__pb2.DeviceInventoryResponse.SerializeToString,
            ),
            'GetUsageData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsageData,
                    request_deserializer=partner__api__pb2.DeviceUsageRequest.FromString,
                    response_serializer=partner__api__pb2.DeviceUsageResponse.SerializeToString,
            ),
            'GetOutletStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOutletStatus,
                    request_deserializer=partner__api__pb2.DeviceListRequest.FromString,
                    response_serializer=partner__api__pb2.OutletStatusResponse.SerializeToString,
            ),
            'SetOutletStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOutletStatus,
                    request_deserializer=partner__api__pb2.OutletStatusRequest.FromString,
                    response_serializer=partner__api__pb2.OutletStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.PartnerApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PartnerApi(object):
    """The methods available from the Emporia Energy Partner API.  The Emporia API is available via gRPC at 
    URL:  partner-api.emporiaenergy.com 
    PORT: 50051
    """

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.PartnerApi/Authenticate',
            partner__api__pb2.AuthenticationRequest.SerializeToString,
            partner__api__pb2.AuthenticationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.PartnerApi/GetDevices',
            partner__api__pb2.DeviceInventoryRequest.SerializeToString,
            partner__api__pb2.DeviceInventoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUsageData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.PartnerApi/GetUsageData',
            partner__api__pb2.DeviceUsageRequest.SerializeToString,
            partner__api__pb2.DeviceUsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOutletStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.PartnerApi/GetOutletStatus',
            partner__api__pb2.DeviceListRequest.SerializeToString,
            partner__api__pb2.OutletStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOutletStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.PartnerApi/SetOutletStatus',
            partner__api__pb2.OutletStatusRequest.SerializeToString,
            partner__api__pb2.OutletStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
